name: Update Platform Metadata
on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  update-platforms:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Check Paper updates
        id: paper
        run: |
          echo "Checking Paper updates..."
          CURRENT_PAPER=$(cat metadata/platforms/paper.json | jq '.versions')
          
          PAPER_VERSIONS=$(curl -s "https://api.papermc.io/v2/projects/paper" | jq '.versions')
          echo "Found Paper versions: $PAPER_VERSIONS"
          
          NEW_VERSIONS="[]"
          for version in $(echo "$PAPER_VERSIONS" | jq -r '.[]'); do
            echo "Checking version: $version"
            BUILD_ID=$(curl -s "https://api.papermc.io/v2/projects/paper/versions/$version" | jq '.builds | max')
            echo "Latest build for $version: $BUILD_ID"
            
            if [ "$BUILD_ID" != "null" ]; then
              SHOULD_ADD=$(echo "$CURRENT_PAPER" | jq --arg v "$version" --arg b "$BUILD_ID" '
                if length == 0 then true
                else
                  (.[] | select(.version == $v) | .buildId // 0) as $current |
                  if $current == 0 then true
                  else ($b | tonumber) > ($current | tonumber)
                  end
                end
              ')
              
              if [ "$SHOULD_ADD" = "true" ]; then
                CURRENT_BUILD=$(echo "$CURRENT_PAPER" | jq --arg v "$version" '.[] | select(.version == $v) | .buildId // "0"')
                echo "New version found: $version build $BUILD_ID (current: $CURRENT_BUILD)"
                NEW_VERSION="{\"version\": \"$version\", \"buildId\": $BUILD_ID}"
                NEW_VERSIONS=$(echo "$NEW_VERSIONS $NEW_VERSION" | jq -s '.[0] + [.[1]]')
              else
                CURRENT_BUILD=$(echo "$CURRENT_PAPER" | jq --arg v "$version" '.[] | select(.version == $v) | .buildId // "0"')
                echo "Version $version build $BUILD_ID already exists or is older (current: $CURRENT_BUILD)"
              fi
            fi
          done
          
          if [ "$(echo $NEW_VERSIONS | jq length)" -gt 0 ]; then
            echo "New Paper versions found:"
            echo "$NEW_VERSIONS" | jq .
            echo "has_updates=true" >> $GITHUB_OUTPUT
            
            jq --slurpfile new <(echo "$NEW_VERSIONS") \
              '.versions = (.versions + $new[0]) | .versions |= sort_by(.version) | .versions |= reverse' \
              metadata/platforms/paper.json > paper-temp.json
            mv paper-temp.json metadata/platforms/paper.json
            echo "Paper metadata updated successfully"
          else
            echo "No new Paper versions"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

      - name: Check Velocity updates
        id: velocity
        run: |
          echo "Checking Velocity updates..."
          CURRENT_VELOCITY=$(cat metadata/platforms/velocity.json | jq '.versions')
          
          VELOCITY_VERSIONS=$(curl -s "https://api.papermc.io/v2/projects/velocity" | jq '.versions')
          echo "Found Velocity versions: $VELOCITY_VERSIONS"
          
          NEW_VERSIONS="[]"
          for version in $(echo "$VELOCITY_VERSIONS" | jq -r '.[]'); do
            echo "Checking version: $version"
            BUILD_ID=$(curl -s "https://api.papermc.io/v2/projects/velocity/versions/$version" | jq '.builds | max')
            echo "Latest build for $version: $BUILD_ID"
            
            if [ "$BUILD_ID" != "null" ]; then
              SHOULD_ADD=$(echo "$CURRENT_VELOCITY" | jq --arg v "$version" --arg b "$BUILD_ID" '
                if length == 0 then true
                else
                  (.[] | select(.version == $v) | .buildId // 0) as $current |
                  if $current == 0 then true
                  else ($b | tonumber) > ($current | tonumber)
                  end
                end
              ')
              
              if [ "$SHOULD_ADD" = "true" ]; then
                CURRENT_BUILD=$(echo "$CURRENT_VELOCITY" | jq --arg v "$version" '.[] | select(.version == $v) | .buildId // "0"')
                echo "New version found: $version build $BUILD_ID (current: $CURRENT_BUILD)"
                NEW_VERSION="{\"version\": \"$version\", \"buildId\": $BUILD_ID}"
                NEW_VERSIONS=$(echo "$NEW_VERSIONS $NEW_VERSION" | jq -s '.[0] + [.[1]]')
              else
                CURRENT_BUILD=$(echo "$CURRENT_VELOCITY" | jq --arg v "$version" '.[] | select(.version == $v) | .buildId // "0"')
                echo "Version $version build $BUILD_ID already exists or is older (current: $CURRENT_BUILD)"
              fi
            fi
          done
          
          if [ "$(echo $NEW_VERSIONS | jq length)" -gt 0 ]; then
            echo "New Velocity versions found:"
            echo "$NEW_VERSIONS" | jq .
            echo "has_updates=true" >> $GITHUB_OUTPUT
            
            jq --slurpfile new <(echo "$NEW_VERSIONS") \
              '.versions = (.versions + $new[0]) | .versions |= sort_by(.version) | .versions |= reverse' \
              metadata/platforms/velocity.json > velocity-temp.json
            mv velocity-temp.json metadata/platforms/velocity.json
            echo "Velocity metadata updated successfully"
          else
            echo "No new Velocity versions"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

      - name: Check Folia updates
        id: folia
        run: |
          echo "Checking Folia updates..."
          CURRENT_FOLIA=$(cat metadata/platforms/folia.json | jq '.versions')
          
          FOLIA_VERSIONS=$(curl -s "https://api.papermc.io/v2/projects/folia" | jq '.versions')
          echo "Found Folia versions: $FOLIA_VERSIONS"
          
          NEW_VERSIONS="[]"
          for version in $(echo "$FOLIA_VERSIONS" | jq -r '.[]'); do
            echo "Checking version: $version"
            BUILD_DATA=$(curl -s "https://api.papermc.io/v2/projects/folia/versions/$version")
            BUILD_ID=$(echo "$BUILD_DATA" | jq '.builds | max')
            echo "Latest build for $version: $BUILD_ID"
            
            HASH=$(curl -s "https://api.papermc.io/v2/projects/folia/versions/$version/builds/$BUILD_ID" | jq -r '.downloads.application.sha256 // empty')
            echo "Hash for $version build $BUILD_ID: $HASH"
            
            if [ "$BUILD_ID" != "null" ] && [ -n "$HASH" ]; then
              SHOULD_ADD=$(echo "$CURRENT_FOLIA" | jq --arg v "$version" --arg b "$BUILD_ID" '
                if length == 0 then true
                else
                  (.[] | select(.version == $v) | .buildId // 0) as $current |
                  if $current == 0 then true
                  else ($b | tonumber) > ($current | tonumber)
                  end
                end
              ')
              
              if [ "$SHOULD_ADD" = "true" ]; then
                CURRENT_BUILD=$(echo "$CURRENT_FOLIA" | jq --arg v "$version" '.[] | select(.version == $v) | .buildId // "0"')
                echo "New version found: $version build $BUILD_ID (current: $CURRENT_BUILD)"
                NEW_VERSION="{\"version\": \"$version\", \"buildId\": \"$BUILD_ID\", \"hash\": \"$HASH\"}"
                NEW_VERSIONS=$(echo "$NEW_VERSIONS $NEW_VERSION" | jq -s '.[0] + [.[1]]')
              else
                CURRENT_BUILD=$(echo "$CURRENT_FOLIA" | jq --arg v "$version" '.[] | select(.version == $v) | .buildId // "0"')
                echo "Version $version build $BUILD_ID already exists or is older (current: $CURRENT_BUILD)"
              fi
            fi
          done
          
          if [ "$(echo $NEW_VERSIONS | jq length)" -gt 0 ]; then
            echo "New Folia versions found:"
            echo "$NEW_VERSIONS" | jq .
            echo "has_updates=true" >> $GITHUB_OUTPUT
            
            jq --slurpfile new <(echo "$NEW_VERSIONS") \
              '.versions = (.versions + $new[0]) | .versions |= sort_by(.version) | .versions |= reverse' \
              metadata/platforms/folia.json > folia-temp.json
            mv folia-temp.json metadata/platforms/folia.json
            echo "Folia metadata updated successfully"
          else
            echo "No new Folia versions"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

      - name: Check Purpur updates
        id: purpur
        run: |
          echo "Checking Purpur updates..."
          CURRENT_PURPUR=$(cat metadata/platforms/purpur.json | jq '.versions')
          
          PURPUR_VERSIONS=$(curl -s "https://api.purpurmc.org/v2/versions" | jq '.versions')
          echo "Found Purpur versions: $PURPUR_VERSIONS"
          
          if [ "$PURPUR_VERSIONS" = "null" ] || [ "$PURPUR_VERSIONS" = "[]" ]; then
            echo "No Purpur versions found or API error"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          else
            NEW_VERSIONS="[]"
            for version in $(echo "$PURPUR_VERSIONS" | jq -r '.[]'); do
              echo "Checking version: $version"
              BUILD_ID=$(curl -s "https://api.purpurmc.org/v2/purpur/$version" | jq '.builds | max')
              echo "Latest build for $version: $BUILD_ID"
              
              if [ "$BUILD_ID" != "null" ]; then
                SHOULD_ADD=$(echo "$CURRENT_PURPUR" | jq --arg v "$version" --arg b "$BUILD_ID" '
                  if length == 0 then true
                  else
                    (.[] | select(.version == $v) | .buildId // 0) as $current |
                    if $current == 0 then true
                    else ($b | tonumber) > ($current | tonumber)
                    end
                  end
                ')
                
                if [ "$SHOULD_ADD" = "true" ]; then
                  CURRENT_BUILD=$(echo "$CURRENT_PURPUR" | jq --arg v "$version" '.[] | select(.version == $v) | .buildId // "0"')
                  echo "New version found: $version build $BUILD_ID (current: $CURRENT_BUILD)"
                  NEW_VERSION="{\"version\": \"$version\", \"buildId\": \"$BUILD_ID\"}"
                  NEW_VERSIONS=$(echo "$NEW_VERSIONS $NEW_VERSION" | jq -s '.[0] + [.[1]]')
                else
                  CURRENT_BUILD=$(echo "$CURRENT_PURPUR" | jq --arg v "$version" '.[] | select(.version == $v) | .buildId // "0"')
                  echo "Version $version build $BUILD_ID already exists or is older (current: $CURRENT_BUILD)"
                fi
              fi
            done
            
            if [ "$(echo $NEW_VERSIONS | jq length)" -gt 0 ]; then
              echo "New Purpur versions found:"
              echo "$NEW_VERSIONS" | jq .
              echo "has_updates=true" >> $GITHUB_OUTPUT
              
              jq --slurpfile new <(echo "$NEW_VERSIONS") \
                '.versions = (.versions + $new[0]) | .versions |= sort_by(.version) | .versions |= reverse' \
                metadata/platforms/purpur.json > purpur-temp.json
              mv purpur-temp.json metadata/platforms/purpur.json
              echo "Purpur metadata updated successfully"
            else
              echo "No new Purpur versions"
              echo "has_updates=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Check Waterfall updates
        id: waterfall
        run: |
          echo "Checking Waterfall updates..."
          CURRENT_WATERFALL=$(cat metadata/platforms/waterfall.json | jq '.versions')
          
          WATERFALL_VERSIONS=$(curl -s "https://api.papermc.io/v2/projects/waterfall" | jq '.versions')
          echo "Found Waterfall versions: $WATERFALL_VERSIONS"
          
          NEW_VERSIONS="[]"
          for version in $(echo "$WATERFALL_VERSIONS" | jq -r '.[]'); do
            echo "Checking version: $version"
            BUILD_ID=$(curl -s "https://api.papermc.io/v2/projects/waterfall/versions/$version" | jq '.builds | max')
            echo "Latest build for $version: $BUILD_ID"
            
            if [ "$BUILD_ID" != "null" ]; then
              SHOULD_ADD=$(echo "$CURRENT_WATERFALL" | jq --arg v "$version" --arg b "$BUILD_ID" '
                if length == 0 then true
                else
                  (.[] | select(.version == $v) | .buildId // 0) as $current |
                  if $current == 0 then true
                  else ($b | tonumber) > ($current | tonumber)
                  end
                end
              ')
              
              if [ "$SHOULD_ADD" = "true" ]; then
                CURRENT_BUILD=$(echo "$CURRENT_WATERFALL" | jq --arg v "$version" '.[] | select(.version == $v) | .buildId // "0"')
                echo "New version found: $version build $BUILD_ID (current: $CURRENT_BUILD)"
                NEW_VERSION="{\"version\": \"$version\", \"buildId\": \"$BUILD_ID\"}"
                NEW_VERSIONS=$(echo "$NEW_VERSIONS $NEW_VERSION" | jq -s '.[0] + [.[1]]')
              else
                CURRENT_BUILD=$(echo "$CURRENT_WATERFALL" | jq --arg v "$version" '.[] | select(.version == $v) | .buildId // "0"')
                echo "Version $version build $BUILD_ID already exists or is older (current: $CURRENT_BUILD)"
              fi
            fi
          done
          
          if [ "$(echo $NEW_VERSIONS | jq length)" -gt 0 ]; then
            echo "New Waterfall versions found:"
            echo "$NEW_VERSIONS" | jq .
            echo "has_updates=true" >> $GITHUB_OUTPUT
            
            jq --slurpfile new <(echo "$NEW_VERSIONS") \
              '.versions = (.versions + $new[0]) | .versions |= sort_by(.version) | .versions |= reverse' \
              metadata/platforms/waterfall.json > waterfall-temp.json
            mv waterfall-temp.json metadata/platforms/waterfall.json
            echo "Waterfall metadata updated successfully"
          else
            echo "No new Waterfall versions"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

      - name: Check Limbo updates
        id: limbo
        run: |
          echo "Checking Limbo updates..."
          CURRENT_LIMBO=$(cat metadata/platforms/limbo.json | jq '.versions')
          
          JENKINS_API="https://ci.loohpjames.com/job/Limbo/api/json"
          LIMBO_BUILDS=$(curl -s "$JENKINS_API" | jq '.builds[] | {number: .number, url: .url}')
          echo "Found Limbo builds: $LIMBO_BUILDS"
          
          NEW_VERSIONS="[]"
          for build in $(echo "$LIMBO_BUILDS" | jq -c '.'); do
            BUILD_NUMBER=$(echo "$build" | jq -r '.number')
            BUILD_URL=$(echo "$build" | jq -r '.url')
            
            echo "Checking build: $BUILD_NUMBER"
            
            BUILD_DETAILS=$(curl -s "${BUILD_URL}api/json")
            VERSION=$(echo "$BUILD_DETAILS" | jq -r '.actions[] | select(.type == "hudson.model.ParametersAction") | .parameters[] | select(.name == "MINECRAFT_VERSION") | .value // empty')
            JAR_VERSION=$(echo "$BUILD_DETAILS" | jq -r '.actions[] | select(.type == "hudson.model.ParametersAction") | .parameters[] | select(.name == "JAR_VERSION") | .value // empty')
            
            echo "Build $BUILD_NUMBER: version=$VERSION, jarVersion=$JAR_VERSION"
            
            if [ -n "$VERSION" ] && [ -n "$JAR_VERSION" ]; then
              SHOULD_ADD=$(echo "$CURRENT_LIMBO" | jq --arg v "$VERSION" --arg b "$BUILD_NUMBER" '
                if length == 0 then true
                else
                  (.[] | select(.version == $v) | .buildId // 0) as $current |
                  if $current == 0 then true
                  else ($b | tonumber) > ($current | tonumber)
                  end
                end
              ')
              
              if [ "$SHOULD_ADD" = "true" ]; then
                CURRENT_BUILD=$(echo "$CURRENT_LIMBO" | jq --arg v "$VERSION" '.[] | select(.version == $v) | .buildId // "0"')
                echo "New version found: $VERSION build $BUILD_NUMBER (current: $CURRENT_BUILD)"
                NEW_VERSION="{\"version\": \"$VERSION\", \"jarVersion\": \"$JAR_VERSION\", \"buildId\": \"$BUILD_NUMBER\"}"
                NEW_VERSIONS=$(echo "$NEW_VERSIONS $NEW_VERSION" | jq -s '.[0] + [.[1]]')
              else
                CURRENT_BUILD=$(echo "$CURRENT_LIMBO" | jq --arg v "$VERSION" '.[] | select(.version == $v) | .buildId // "0"')
                echo "Version $VERSION build $BUILD_NUMBER already exists or is older (current: $CURRENT_BUILD)"
              fi
            fi
          done
          
          if [ "$(echo $NEW_VERSIONS | jq length)" -gt 0 ]; then
            echo "New Limbo versions found:"
            echo "$NEW_VERSIONS" | jq .
            echo "has_updates=true" >> $GITHUB_OUTPUT
            
            jq --slurpfile new <(echo "$NEW_VERSIONS") \
              '.versions = (.versions + $new[0]) | .versions |= sort_by(.version) | .versions |= reverse' \
              metadata/platforms/limbo.json > limbo-temp.json
            mv limbo-temp.json metadata/platforms/limbo.json
            echo "Limbo metadata updated successfully"
          else
            echo "No new Limbo versions"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

      - name: Check Leaf updates
        id: leaf
        run: |
          echo "Checking Leaf updates..."
          CURRENT_LEAF=$(cat metadata/platforms/leaf.json | jq '.versions')
          
          LEAF_VERSIONS=$(curl -s "https://api.leafmc.one/v2/projects/leaf" | jq '.versions')
          echo "Found Leaf versions: $LEAF_VERSIONS"
          
          NEW_VERSIONS="[]"
          for version in $(echo "$LEAF_VERSIONS" | jq -r '.[]'); do
            echo "Checking version: $version"
            BUILD_ID=$(curl -s "https://api.leafmc.one/v2/projects/leaf/versions/$version" | jq '.builds | max')
            echo "Latest build for $version: $BUILD_ID"
            
            if [ "$BUILD_ID" != "null" ]; then
              SHOULD_ADD=$(echo "$CURRENT_LEAF" | jq --arg v "$version" --arg b "$BUILD_ID" '
                if length == 0 then true
                else
                  (.[] | select(.version == $v) | .buildId // 0) as $current |
                  if $current == 0 then true
                  else ($b | tonumber) > ($current | tonumber)
                  end
                end
              ')
              
              if [ "$SHOULD_ADD" = "true" ]; then
                CURRENT_BUILD=$(echo "$CURRENT_LEAF" | jq --arg v "$version" '.[] | select(.version == $v) | .buildId // "0"')
                echo "New version found: $version build $BUILD_ID (current: $CURRENT_BUILD)"
                NEW_VERSION="{\"version\": \"$version\", \"buildId\": $BUILD_ID}"
                NEW_VERSIONS=$(echo "$NEW_VERSIONS $NEW_VERSION" | jq -s '.[0] + [.[1]]')
              else
                CURRENT_BUILD=$(echo "$CURRENT_LEAF" | jq --arg v "$version" '.[] | select(.version == $v) | .buildId // "0"')
                echo "Version $version build $BUILD_ID already exists or is older (current: $CURRENT_BUILD)"
              fi
            fi
          done
          
          if [ "$(echo $NEW_VERSIONS | jq length)" -gt 0 ]; then
            echo "New Leaf versions found:"
            echo "$NEW_VERSIONS" | jq .
            echo "has_updates=true" >> $GITHUB_OUTPUT
            
            jq --slurpfile new <(echo "$NEW_VERSIONS") \
              '.versions = (.versions + $new[0]) | .versions |= sort_by(.version) | .versions |= reverse' \
              metadata/platforms/leaf.json > leaf-temp.json
            mv leaf-temp.json metadata/platforms/leaf.json
            echo "Leaf metadata updated successfully"
          else
            echo "No new Leaf versions"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Pull Request
        if: steps.paper.outputs.has_updates == 'true' || steps.velocity.outputs.has_updates == 'true' || steps.folia.outputs.has_updates == 'true' || steps.purpur.outputs.has_updates == 'true' || steps.waterfall.outputs.has_updates == 'true' || steps.limbo.outputs.has_updates == 'true' || steps.leaf.outputs.has_updates == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update platform metadata with new versions"
          title: "Platform Updates: New versions available"
          body: |
            ## Platform Updates
            
            This PR updates the platform metadata with new versions:
            
            - **Paper**: ${{ steps.paper.outputs.has_updates == 'true' && '✅ Updated' || '❌ No updates' }}
            - **Velocity**: ${{ steps.velocity.outputs.has_updates == 'true' && '✅ Updated' || '❌ No updates' }}
            - **Folia**: ${{ steps.folia.outputs.has_updates == 'true' && '✅ Updated' || '❌ No updates' }}
            - **Purpur**: ${{ steps.purpur.outputs.has_updates == 'true' && '✅ Updated' || '❌ No updates' }}
            - **Waterfall**: ${{ steps.waterfall.outputs.has_updates == 'true' && '✅ Updated' || '❌ No updates' }}
            - **Limbo**: ${{ steps.limbo.outputs.has_updates == 'true' && '✅ Updated' || '❌ No updates' }}
            - **Leaf**: ${{ steps.leaf.outputs.has_updates == 'true' && '✅ Updated' || '❌ No updates' }}
            
            ### Changes
            - Updated `metadata/platforms/*.json` files
            - Added new versions from external APIs
            - Sorted versions by version number (newest first)
          branch: update-platform-metadata
          delete-branch: true