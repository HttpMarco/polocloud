 'use client'

import { useState, useEffect, useCallback } from "react";
import { Sidebar, SidebarContent, SidebarFooter } from "@/components/ui/sidebar";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useRouter } from "next/navigation";
import Image from "next/image";
import { toast } from "sonner";
import { 
  Settings, 
  LogOut, 
  Moon, 
  Sparkles, 
  Globe, 
  Palette, 
  TreePine, 
  Flame,
  Monitor,
  Lock,
  Edit,
  Save,
  X,
  Eye,
  EyeOff,
  Trash2,
  Laptop,
  Smartphone,
  Tablet
} from "lucide-react";
import { API_ENDPOINTS } from "@/lib/api";
import { SidebarHeaderComponent } from "@/components/sidebar/sidebar-header";
import { CloudNavigation } from "@/components/sidebar/cloud-navigation";
import { TeamNavigation } from "@/components/sidebar/team-navigation";
import { SettingsDialog } from "@/components/sidebar/settings-dialog";

interface UserData {
  username: string;
  userUUID: string;
  role: { id: number; label: string; hexColor: string } | null;
}

interface ChangePasswordData {
  currentPassword: string;
  newPassword: string;
  confirmPassword: string;
}



let userDataCache: UserData | null = null;

const resetUserDataCache = () => {
  userDataCache = null;
};

const loadUserData = async (): Promise<UserData> => {
  if (userDataCache) return userDataCache;
  
  try {

    const adminUsername = localStorage.getItem('adminUsername');
    const isLoggedIn = localStorage.getItem('isLoggedIn');
    
    if (adminUsername && isLoggedIn === 'true') {

      try {
        const userResponse = await fetch(API_ENDPOINTS.AUTH.ME);
        if (userResponse.ok) {
          const responseData = await userResponse.json();

          if (responseData.authenticated && responseData.user) {
            const username = responseData.user.username || adminUsername;
            const userUUID = responseData.user.uuid || 'admin-' + Date.now();

            let role = null;
            if (responseData.user.role !== undefined && responseData.user.role !== null) {
              try {
                const roleResponse = await fetch(API_ENDPOINTS.ROLE.GET(responseData.user.role));
                if (roleResponse.ok) {
                  const roleData = await roleResponse.json();
                  role = roleData;
                }
              } catch {}
            }

            if (role) {
              userDataCache = { username, userUUID, role };
              return userDataCache;
            }
          }
        }
      } catch  {}
      const role = {
        id: -1,
        label: 'Admin',
        hexColor: '#dc2626'
      };
      
      userDataCache = { 
        username: adminUsername, 
        userUUID: 'admin-' + Date.now(),
        role 
      };
      return userDataCache;
    }

    userDataCache = { username: 'Guest', userUUID: '', role: null };
    return userDataCache;
    
  } catch {
    userDataCache = { username: 'Guest', userUUID: '', role: null };
    return userDataCache;
  }
};





const ChangePasswordDialog = ({ 
  isOpen, 
  onClose, 
  onSubmit, 
  data, 
  onChange, 
  isLoading 
}: {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: () => void;
  data: ChangePasswordData;
  onChange: (field: keyof ChangePasswordData, value: string) => void;
  isLoading: boolean;
}) => (
  <Dialog open={isOpen} onOpenChange={onClose}>
    <DialogContent className="max-w-md bg-sidebar border border-sidebar-border">
      <DialogHeader>
        <DialogTitle className="text-xl font-semibold text-sidebar-foreground flex items-center space-x-2">
          <Lock className="w-5 h-5" />
          <span>Change Password</span>
        </DialogTitle>
      </DialogHeader>
      
      <div className="space-y-4 mt-6">
        <div className="space-y-2">
          <Label htmlFor="current-password" className="text-sm font-medium text-sidebar-foreground">
            Current Password
          </Label>
          <Input 
            id="current-password" 
            type="password" 
            placeholder="Enter current password" 
            className="bg-sidebar-accent border-sidebar-border"
            value={data.currentPassword}
            onChange={(e) => onChange('currentPassword', e.target.value)}
          />
        </div>
        
        <div className="space-y-2">
          <Label htmlFor="new-password" className="text-sm font-medium text-sidebar-foreground">
            New Password
          </Label>
          <Input 
            id="new-password" 
            type="password" 
            placeholder="Enter new password" 
            className="bg-sidebar-accent border-sidebar-border"
            value={data.newPassword}
            onChange={(e) => onChange('newPassword', e.target.value)}
          />
        </div>
        
        <div className="space-y-2">
          <Label htmlFor="confirm-password" className="text-sm font-medium text-sidebar-foreground">
            Confirm New Password
          </Label>
          <Input 
            id="confirm-password" 
            type="password" 
            placeholder="Confirm new password" 
            className="bg-sidebar-accent border-sidebar-border"
            value={data.confirmPassword}
            onChange={(e) => onChange('confirmPassword', e.target.value)}
          />
        </div>
        
        <div className="flex justify-end space-x-2">
          <Button 
            variant="outline" 
            onClick={onClose}
            className="border-sidebar-border text-sidebar-foreground hover:bg-sidebar-accent"
          >
            Cancel
          </Button>
          <Button 
            onClick={onSubmit}
            disabled={isLoading || !data.newPassword || !data.confirmPassword}
            className="bg-primary hover:bg-primary/90"
          >
            {isLoading ? 'Changing...' : 'Save Changes'}
          </Button>
        </div>
      </div>
    </DialogContent>
  </Dialog>
);


// SecurityTab component removed - will be extracted separately
const SecurityTab = () => {
  return <div className="text-center py-8 text-muted-foreground">SecurityTab component will be extracted here</div>;
};
